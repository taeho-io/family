// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import auth "github.com/taeho-io/family/idl/generated/go/pb/family/auth"
import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// AuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type AuthServiceClient struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Auth(ctx context.Context, in *auth.AuthRequest, opts ...grpc.CallOption) (*auth.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.AuthRequest, ...grpc.CallOption) *auth.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.AuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Parse(ctx context.Context, in *auth.ParseRequest, opts ...grpc.CallOption) (*auth.ParseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.ParseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ParseRequest, ...grpc.CallOption) *auth.ParseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ParseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ParseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Refresh(ctx context.Context, in *auth.RefreshRequest, opts ...grpc.CallOption) (*auth.RefreshResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.RefreshResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RefreshRequest, ...grpc.CallOption) *auth.RefreshResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RefreshResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.RefreshRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Validate(ctx context.Context, in *auth.ValidateRequest, opts ...grpc.CallOption) (*auth.ValidateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.ValidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ValidateRequest, ...grpc.CallOption) *auth.ValidateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ValidateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ValidateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
