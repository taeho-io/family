//
// NotesNote.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class NotesNote: Codable {

    public var createdAt: String?
    public var createdBy: String?
    public var noteId: String?
    public var shareType: NotesShareType?
    public var text: String?
    public var textType: NotesTextType?
    public var updatedAt: String?


    
    public init(createdAt: String?, createdBy: String?, noteId: String?, shareType: NotesShareType?, text: String?, textType: NotesTextType?, updatedAt: String?) {
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.noteId = noteId
        self.shareType = shareType
        self.text = text
        self.textType = textType
        self.updatedAt = updatedAt
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(createdBy, forKey: "created_by")
        try container.encodeIfPresent(noteId, forKey: "note_id")
        try container.encodeIfPresent(shareType, forKey: "share_type")
        try container.encodeIfPresent(text, forKey: "text")
        try container.encodeIfPresent(textType, forKey: "text_type")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        createdAt = try container.decodeIfPresent(String.self, forKey: "created_at")
        createdBy = try container.decodeIfPresent(String.self, forKey: "created_by")
        noteId = try container.decodeIfPresent(String.self, forKey: "note_id")
        shareType = try container.decodeIfPresent(NotesShareType.self, forKey: "share_type")
        text = try container.decodeIfPresent(String.self, forKey: "text")
        textType = try container.decodeIfPresent(NotesTextType.self, forKey: "text_type")
        updatedAt = try container.decodeIfPresent(String.self, forKey: "updated_at")
    }
}

