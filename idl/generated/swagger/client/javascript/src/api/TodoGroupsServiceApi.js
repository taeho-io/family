/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TodogroupsCreateTodoGroupRequest', 'model/TodogroupsCreateTodoGroupResponse', 'model/TodogroupsDeleteTodoGroupResponse', 'model/TodogroupsGetTodoGroupResponse', 'model/TodogroupsListTodoGroupsResponse', 'model/TodogroupsUpdateTodoGroupRequest', 'model/TodogroupsUpdateTodoGroupResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TodogroupsCreateTodoGroupRequest'), require('../model/TodogroupsCreateTodoGroupResponse'), require('../model/TodogroupsDeleteTodoGroupResponse'), require('../model/TodogroupsGetTodoGroupResponse'), require('../model/TodogroupsListTodoGroupsResponse'), require('../model/TodogroupsUpdateTodoGroupRequest'), require('../model/TodogroupsUpdateTodoGroupResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.TodoGroupsServiceApi = factory(root.Api.ApiClient, root.Api.TodogroupsCreateTodoGroupRequest, root.Api.TodogroupsCreateTodoGroupResponse, root.Api.TodogroupsDeleteTodoGroupResponse, root.Api.TodogroupsGetTodoGroupResponse, root.Api.TodogroupsListTodoGroupsResponse, root.Api.TodogroupsUpdateTodoGroupRequest, root.Api.TodogroupsUpdateTodoGroupResponse);
  }
}(this, function(ApiClient, TodogroupsCreateTodoGroupRequest, TodogroupsCreateTodoGroupResponse, TodogroupsDeleteTodoGroupResponse, TodogroupsGetTodoGroupResponse, TodogroupsListTodoGroupsResponse, TodogroupsUpdateTodoGroupRequest, TodogroupsUpdateTodoGroupResponse) {
  'use strict';

  /**
   * TodoGroupsService service.
   * @module api/TodoGroupsServiceApi
   * @version 0.0.1
   */

  /**
   * Constructs a new TodoGroupsServiceApi. 
   * @alias module:api/TodoGroupsServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {module:model/TodogroupsCreateTodoGroupRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TodogroupsCreateTodoGroupResponse} and HTTP response
     */
    this.createTodoGroupWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTodoGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TodogroupsCreateTodoGroupResponse;

      return this.apiClient.callApi(
        '/v1/todo-groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {module:model/TodogroupsCreateTodoGroupRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TodogroupsCreateTodoGroupResponse}
     */
    this.createTodoGroup = function(body) {
      return this.createTodoGroupWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} todoGroupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TodogroupsDeleteTodoGroupResponse} and HTTP response
     */
    this.deleteTodoGroupWithHttpInfo = function(todoGroupId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'todoGroupId' is set
      if (todoGroupId === undefined || todoGroupId === null) {
        throw new Error("Missing the required parameter 'todoGroupId' when calling deleteTodoGroup");
      }


      var pathParams = {
        'todo_group_id': todoGroupId
      };
      var queryParams = {
        'account_id': opts['accountId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TodogroupsDeleteTodoGroupResponse;

      return this.apiClient.callApi(
        '/v1/todo-groups/{todo_group_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} todoGroupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TodogroupsDeleteTodoGroupResponse}
     */
    this.deleteTodoGroup = function(todoGroupId, opts) {
      return this.deleteTodoGroupWithHttpInfo(todoGroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} todoGroupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TodogroupsGetTodoGroupResponse} and HTTP response
     */
    this.getTodoGroupWithHttpInfo = function(todoGroupId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'todoGroupId' is set
      if (todoGroupId === undefined || todoGroupId === null) {
        throw new Error("Missing the required parameter 'todoGroupId' when calling getTodoGroup");
      }


      var pathParams = {
        'todo_group_id': todoGroupId
      };
      var queryParams = {
        'account_id': opts['accountId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TodogroupsGetTodoGroupResponse;

      return this.apiClient.callApi(
        '/v1/todo-groups/{todo_group_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} todoGroupId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TodogroupsGetTodoGroupResponse}
     */
    this.getTodoGroup = function(todoGroupId, opts) {
      return this.getTodoGroupWithHttpInfo(todoGroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TodogroupsListTodoGroupsResponse} and HTTP response
     */
    this.listTodoGroupsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'account_id': opts['accountId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TodogroupsListTodoGroupsResponse;

      return this.apiClient.callApi(
        '/v1/todo-groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TodogroupsListTodoGroupsResponse}
     */
    this.listTodoGroups = function(opts) {
      return this.listTodoGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} todoGroupId 
     * @param {module:model/TodogroupsUpdateTodoGroupRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TodogroupsUpdateTodoGroupResponse} and HTTP response
     */
    this.updateTodoGroupWithHttpInfo = function(todoGroupId, body) {
      var postBody = body;

      // verify the required parameter 'todoGroupId' is set
      if (todoGroupId === undefined || todoGroupId === null) {
        throw new Error("Missing the required parameter 'todoGroupId' when calling updateTodoGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTodoGroup");
      }


      var pathParams = {
        'todo_group_id': todoGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TodogroupsUpdateTodoGroupResponse;

      return this.apiClient.callApi(
        '/v1/todo-groups/{todo_group_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} todoGroupId 
     * @param {module:model/TodogroupsUpdateTodoGroupRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TodogroupsUpdateTodoGroupResponse}
     */
    this.updateTodoGroup = function(todoGroupId, body) {
      return this.updateTodoGroupWithHttpInfo(todoGroupId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
