// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import auth "github.com/taeho-io/family/idl/generated/go/pb/family/auth"
import context "context"
import mock "github.com/stretchr/testify/mock"

// AuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type AuthServiceServer struct {
	mock.Mock
}

// Auth provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Auth(_a0 context.Context, _a1 *auth.AuthRequest) (*auth.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.AuthRequest) *auth.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.AuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Parse(_a0 context.Context, _a1 *auth.ParseRequest) (*auth.ParseResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ParseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ParseRequest) *auth.ParseResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ParseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ParseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Refresh(_a0 context.Context, _a1 *auth.RefreshRequest) (*auth.RefreshResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.RefreshResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RefreshRequest) *auth.RefreshResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RefreshResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.RefreshRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Validate(_a0 context.Context, _a1 *auth.ValidateRequest) (*auth.ValidateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ValidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ValidateRequest) *auth.ValidateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ValidateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ValidateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
