//
// TodoGroupsServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class TodoGroupsServiceAPI {
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTodoGroup(body: TodogroupsCreateTodoGroupRequest, completion: @escaping ((_ data: TodogroupsCreateTodoGroupResponse?,_ error: Error?) -> Void)) {
        createTodoGroupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter body: (body)  
     - returns: Observable<TodogroupsCreateTodoGroupResponse>
     */
    open class func createTodoGroup(body: TodogroupsCreateTodoGroupRequest) -> Observable<TodogroupsCreateTodoGroupResponse> {
        return Observable.create { observer -> Disposable in
            createTodoGroup(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - POST /v1/todo-groups
     - examples: [{contentType=application/json, example={
  "todo_group" : {
    "todo_group_id" : "todo_group_id",
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "description" : "description",
    "title" : "title",
    "created_by" : "created_by",
    "permit_type" : { },
    "order" : "order"
  }
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<TodogroupsCreateTodoGroupResponse> 
     */
    open class func createTodoGroupWithRequestBuilder(body: TodogroupsCreateTodoGroupRequest) -> RequestBuilder<TodogroupsCreateTodoGroupResponse> {
        let path = "/v1/todo-groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TodogroupsCreateTodoGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter todoGroupId: (path)  
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTodoGroup(todoGroupId: String, accountId: String? = nil, completion: @escaping ((_ data: TodogroupsDeleteTodoGroupResponse?,_ error: Error?) -> Void)) {
        deleteTodoGroupWithRequestBuilder(todoGroupId: todoGroupId, accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter todoGroupId: (path)  
     - parameter accountId: (query)  (optional)
     - returns: Observable<TodogroupsDeleteTodoGroupResponse>
     */
    open class func deleteTodoGroup(todoGroupId: String, accountId: String? = nil) -> Observable<TodogroupsDeleteTodoGroupResponse> {
        return Observable.create { observer -> Disposable in
            deleteTodoGroup(todoGroupId: todoGroupId, accountId: accountId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - DELETE /v1/todo-groups/{todo_group_id}
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter todoGroupId: (path)  
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<TodogroupsDeleteTodoGroupResponse> 
     */
    open class func deleteTodoGroupWithRequestBuilder(todoGroupId: String, accountId: String? = nil) -> RequestBuilder<TodogroupsDeleteTodoGroupResponse> {
        var path = "/v1/todo-groups/{todo_group_id}"
        path = path.replacingOccurrences(of: "{todo_group_id}", with: "\(todoGroupId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "account_id": accountId
        ])
        

        let requestBuilder: RequestBuilder<TodogroupsDeleteTodoGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter todoGroupId: (path)  
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTodoGroup(todoGroupId: String, accountId: String? = nil, completion: @escaping ((_ data: TodogroupsGetTodoGroupResponse?,_ error: Error?) -> Void)) {
        getTodoGroupWithRequestBuilder(todoGroupId: todoGroupId, accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter todoGroupId: (path)  
     - parameter accountId: (query)  (optional)
     - returns: Observable<TodogroupsGetTodoGroupResponse>
     */
    open class func getTodoGroup(todoGroupId: String, accountId: String? = nil) -> Observable<TodogroupsGetTodoGroupResponse> {
        return Observable.create { observer -> Disposable in
            getTodoGroup(todoGroupId: todoGroupId, accountId: accountId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /v1/todo-groups/{todo_group_id}
     - examples: [{contentType=application/json, example={
  "todo_group" : {
    "todo_group_id" : "todo_group_id",
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "description" : "description",
    "title" : "title",
    "created_by" : "created_by",
    "permit_type" : { },
    "order" : "order"
  }
}}]
     
     - parameter todoGroupId: (path)  
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<TodogroupsGetTodoGroupResponse> 
     */
    open class func getTodoGroupWithRequestBuilder(todoGroupId: String, accountId: String? = nil) -> RequestBuilder<TodogroupsGetTodoGroupResponse> {
        var path = "/v1/todo-groups/{todo_group_id}"
        path = path.replacingOccurrences(of: "{todo_group_id}", with: "\(todoGroupId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "account_id": accountId
        ])
        

        let requestBuilder: RequestBuilder<TodogroupsGetTodoGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTodoGroups(accountId: String? = nil, completion: @escaping ((_ data: TodogroupsListTodoGroupsResponse?,_ error: Error?) -> Void)) {
        listTodoGroupsWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter accountId: (query)  (optional)
     - returns: Observable<TodogroupsListTodoGroupsResponse>
     */
    open class func listTodoGroups(accountId: String? = nil) -> Observable<TodogroupsListTodoGroupsResponse> {
        return Observable.create { observer -> Disposable in
            listTodoGroups(accountId: accountId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /v1/todo-groups
     - examples: [{contentType=application/json, example={
  "todo_groups" : [ {
    "todo_group_id" : "todo_group_id",
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "description" : "description",
    "title" : "title",
    "created_by" : "created_by",
    "permit_type" : { },
    "order" : "order"
  }, {
    "todo_group_id" : "todo_group_id",
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "description" : "description",
    "title" : "title",
    "created_by" : "created_by",
    "permit_type" : { },
    "order" : "order"
  } ]
}}]
     
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<TodogroupsListTodoGroupsResponse> 
     */
    open class func listTodoGroupsWithRequestBuilder(accountId: String? = nil) -> RequestBuilder<TodogroupsListTodoGroupsResponse> {
        let path = "/v1/todo-groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "account_id": accountId
        ])
        

        let requestBuilder: RequestBuilder<TodogroupsListTodoGroupsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter todoGroupId: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTodoGroup(todoGroupId: String, body: TodogroupsUpdateTodoGroupRequest, completion: @escaping ((_ data: TodogroupsUpdateTodoGroupResponse?,_ error: Error?) -> Void)) {
        updateTodoGroupWithRequestBuilder(todoGroupId: todoGroupId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter todoGroupId: (path)  
     - parameter body: (body)  
     - returns: Observable<TodogroupsUpdateTodoGroupResponse>
     */
    open class func updateTodoGroup(todoGroupId: String, body: TodogroupsUpdateTodoGroupRequest) -> Observable<TodogroupsUpdateTodoGroupResponse> {
        return Observable.create { observer -> Disposable in
            updateTodoGroup(todoGroupId: todoGroupId, body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /v1/todo-groups/{todo_group_id}
     - examples: [{contentType=application/json, example={
  "todo_group" : {
    "todo_group_id" : "todo_group_id",
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "description" : "description",
    "title" : "title",
    "created_by" : "created_by",
    "permit_type" : { },
    "order" : "order"
  }
}}]
     
     - parameter todoGroupId: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<TodogroupsUpdateTodoGroupResponse> 
     */
    open class func updateTodoGroupWithRequestBuilder(todoGroupId: String, body: TodogroupsUpdateTodoGroupRequest) -> RequestBuilder<TodogroupsUpdateTodoGroupResponse> {
        var path = "/v1/todo-groups/{todo_group_id}"
        path = path.replacingOccurrences(of: "{todo_group_id}", with: "\(todoGroupId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TodogroupsUpdateTodoGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
