// Code generated by mockery v1.0.0. DO NOT EDIT.

package auth

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockAuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type MockAuthServiceServer struct {
	mock.Mock
}

// Auth provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceServer) Auth(_a0 context.Context, _a1 *AuthRequest) (*AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AuthRequest) *AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceServer) Parse(_a0 context.Context, _a1 *ParseRequest) (*ParseResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ParseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ParseRequest) *ParseResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ParseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ParseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceServer) Refresh(_a0 context.Context, _a1 *RefreshRequest) (*RefreshResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RefreshResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RefreshRequest) *RefreshResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RefreshResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RefreshRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceServer) Validate(_a0 context.Context, _a1 *ValidateRequest) (*ValidateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ValidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ValidateRequest) *ValidateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ValidateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ValidateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
