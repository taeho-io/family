// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import accounts "github.com/taeho-io/family/idl/generated/go/pb/family/accounts"
import accounts_repo "github.com/taeho-io/family/services/accounts/repos/accounts_repo"

import auth "github.com/taeho-io/family/idl/generated/go/pb/family/auth"
import config "github.com/taeho-io/family/services/base/config"
import context "context"
import crypt "github.com/taeho-io/family/services/accounts/crypt"
import dynamodb "github.com/taeho-io/family/services/base/aws/dynamodb"
import grpc "google.golang.org/grpc"
import logrus "github.com/sirupsen/logrus"
import mock "github.com/stretchr/testify/mock"

// IFace is an autogenerated mock type for the IFace type
type IFace struct {
	mock.Mock
}

// AccountsTable provides a mock function with given fields:
func (_m *IFace) AccountsTable() accounts_repo.IFace {
	ret := _m.Called()

	var r0 accounts_repo.IFace
	if rf, ok := ret.Get(0).(func() accounts_repo.IFace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(accounts_repo.IFace)
		}
	}

	return r0
}

// AuthServiceClient provides a mock function with given fields:
func (_m *IFace) AuthServiceClient() auth.AuthServiceClient {
	ret := _m.Called()

	var r0 auth.AuthServiceClient
	if rf, ok := ret.Get(0).(func() auth.AuthServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.AuthServiceClient)
		}
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *IFace) Config() config.IFace {
	ret := _m.Called()

	var r0 config.IFace
	if rf, ok := ret.Get(0).(func() config.IFace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.IFace)
		}
	}

	return r0
}

// Crypt provides a mock function with given fields:
func (_m *IFace) Crypt() crypt.IFace {
	ret := _m.Called()

	var r0 crypt.IFace
	if rf, ok := ret.Get(0).(func() crypt.IFace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypt.IFace)
		}
	}

	return r0
}

// Dynamodb provides a mock function with given fields:
func (_m *IFace) Dynamodb() dynamodb.IFace {
	ret := _m.Called()

	var r0 dynamodb.IFace
	if rf, ok := ret.Get(0).(func() dynamodb.IFace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynamodb.IFace)
		}
	}

	return r0
}

// GetAccountIDFromContext provides a mock function with given fields: ctx
func (_m *IFace) GetAccountIDFromContext(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasPermissionByAccountID provides a mock function with given fields: ctx, accountID
func (_m *IFace) HasPermissionByAccountID(ctx context.Context, accountID string) error {
	ret := _m.Called(ctx, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogIn provides a mock function with given fields: _a0, _a1
func (_m *IFace) LogIn(_a0 context.Context, _a1 *accounts.LogInRequest) (*accounts.LogInResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *accounts.LogInResponse
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.LogInRequest) *accounts.LogInResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.LogInResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accounts.LogInRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger provides a mock function with given fields:
func (_m *IFace) Logger() *logrus.Entry {
	ret := _m.Called()

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func() *logrus.Entry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *IFace) Register(_a0 context.Context, _a1 *accounts.RegisterRequest) (*accounts.RegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *accounts.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.RegisterRequest) *accounts.RegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accounts.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterService provides a mock function with given fields: _a0
func (_m *IFace) RegisterService(_a0 *grpc.Server) {
	_m.Called(_a0)
}
