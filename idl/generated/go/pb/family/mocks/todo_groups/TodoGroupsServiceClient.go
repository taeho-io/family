// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import todo_groups "github.com/taeho-io/family/idl/generated/go/pb/family/todo_groups"

// TodoGroupsServiceClient is an autogenerated mock type for the TodoGroupsServiceClient type
type TodoGroupsServiceClient struct {
	mock.Mock
}

// CreateTodoGroup provides a mock function with given fields: ctx, in, opts
func (_m *TodoGroupsServiceClient) CreateTodoGroup(ctx context.Context, in *todo_groups.CreateTodoGroupRequest, opts ...grpc.CallOption) (*todo_groups.CreateTodoGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todo_groups.CreateTodoGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todo_groups.CreateTodoGroupRequest, ...grpc.CallOption) *todo_groups.CreateTodoGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo_groups.CreateTodoGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo_groups.CreateTodoGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodoGroup provides a mock function with given fields: ctx, in, opts
func (_m *TodoGroupsServiceClient) DeleteTodoGroup(ctx context.Context, in *todo_groups.DeleteTodoGroupRequest, opts ...grpc.CallOption) (*todo_groups.DeleteTodoGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todo_groups.DeleteTodoGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todo_groups.DeleteTodoGroupRequest, ...grpc.CallOption) *todo_groups.DeleteTodoGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo_groups.DeleteTodoGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo_groups.DeleteTodoGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoGroup provides a mock function with given fields: ctx, in, opts
func (_m *TodoGroupsServiceClient) GetTodoGroup(ctx context.Context, in *todo_groups.GetTodoGroupRequest, opts ...grpc.CallOption) (*todo_groups.GetTodoGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todo_groups.GetTodoGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todo_groups.GetTodoGroupRequest, ...grpc.CallOption) *todo_groups.GetTodoGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo_groups.GetTodoGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo_groups.GetTodoGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTodoGroups provides a mock function with given fields: ctx, in, opts
func (_m *TodoGroupsServiceClient) ListTodoGroups(ctx context.Context, in *todo_groups.ListTodoGroupsRequest, opts ...grpc.CallOption) (*todo_groups.ListTodoGroupsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todo_groups.ListTodoGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todo_groups.ListTodoGroupsRequest, ...grpc.CallOption) *todo_groups.ListTodoGroupsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo_groups.ListTodoGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo_groups.ListTodoGroupsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodoGroup provides a mock function with given fields: ctx, in, opts
func (_m *TodoGroupsServiceClient) UpdateTodoGroup(ctx context.Context, in *todo_groups.UpdateTodoGroupRequest, opts ...grpc.CallOption) (*todo_groups.UpdateTodoGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todo_groups.UpdateTodoGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todo_groups.UpdateTodoGroupRequest, ...grpc.CallOption) *todo_groups.UpdateTodoGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo_groups.UpdateTodoGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo_groups.UpdateTodoGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
