// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import dynamo "github.com/guregu/dynamo"
import mock "github.com/stretchr/testify/mock"
import model "github.com/taeho-io/family/services/accounts/internal/model"

// AccountsRepo is an autogenerated mock type for the AccountsRepo type
type AccountsRepo struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: _a0
func (_m *AccountsRepo) DeleteByID(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: _a0
func (_m *AccountsRepo) GetByEmail(_a0 string) (*model.Account, error) {
	ret := _m.Called(_a0)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *AccountsRepo) GetByID(_a0 string) (*model.Account, error) {
	ret := _m.Called(_a0)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: _a0
func (_m *AccountsRepo) Put(_a0 *model.Account) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Table provides a mock function with given fields:
func (_m *AccountsRepo) Table() *dynamo.Table {
	ret := _m.Called()

	var r0 *dynamo.Table
	if rf, ok := ret.Get(0).(func() *dynamo.Table); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamo.Table)
		}
	}

	return r0
}

// UpdateFullName provides a mock function with given fields: _a0, _a1
func (_m *AccountsRepo) UpdateFullName(_a0 string, _a1 string) (*model.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string, string) *model.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHashedPassword provides a mock function with given fields: _a0, _a1
func (_m *AccountsRepo) UpdateHashedPassword(_a0 string, _a1 string) (*model.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string, string) *model.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
