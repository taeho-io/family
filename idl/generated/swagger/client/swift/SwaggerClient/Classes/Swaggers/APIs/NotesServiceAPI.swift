//
// NotesServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class NotesServiceAPI {
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNote(body: NotesCreateNoteRequest, completion: @escaping ((_ data: NotesCreateNoteResponse?,_ error: Error?) -> Void)) {
        createNoteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter body: (body)  
     - returns: Observable<NotesCreateNoteResponse>
     */
    open class func createNote(body: NotesCreateNoteRequest) -> Observable<NotesCreateNoteResponse> {
        return Observable.create { observer -> Disposable in
            createNote(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - POST /v1/notes
     - examples: [{contentType=application/json, example={
  "note" : {
    "note_id" : "note_id",
    "share_type" : { },
    "text_type" : { },
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "text" : "text",
    "created_by" : "created_by"
  }
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<NotesCreateNoteResponse> 
     */
    open class func createNoteWithRequestBuilder(body: NotesCreateNoteRequest) -> RequestBuilder<NotesCreateNoteResponse> {
        let path = "/v1/notes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NotesCreateNoteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter noteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNote(noteId: String, completion: @escaping ((_ data: NotesDeleteNoteResponse?,_ error: Error?) -> Void)) {
        deleteNoteWithRequestBuilder(noteId: noteId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter noteId: (path)  
     - returns: Observable<NotesDeleteNoteResponse>
     */
    open class func deleteNote(noteId: String) -> Observable<NotesDeleteNoteResponse> {
        return Observable.create { observer -> Disposable in
            deleteNote(noteId: noteId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - DELETE /v1/notes/{note_id}
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter noteId: (path)  

     - returns: RequestBuilder<NotesDeleteNoteResponse> 
     */
    open class func deleteNoteWithRequestBuilder(noteId: String) -> RequestBuilder<NotesDeleteNoteResponse> {
        var path = "/v1/notes/{note_id}"
        path = path.replacingOccurrences(of: "{note_id}", with: "\(noteId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NotesDeleteNoteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter noteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNote(noteId: String, completion: @escaping ((_ data: NotesGetNoteResponse?,_ error: Error?) -> Void)) {
        getNoteWithRequestBuilder(noteId: noteId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter noteId: (path)  
     - returns: Observable<NotesGetNoteResponse>
     */
    open class func getNote(noteId: String) -> Observable<NotesGetNoteResponse> {
        return Observable.create { observer -> Disposable in
            getNote(noteId: noteId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /v1/notes/{note_id}
     - examples: [{contentType=application/json, example={
  "note" : {
    "note_id" : "note_id",
    "share_type" : { },
    "text_type" : { },
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "text" : "text",
    "created_by" : "created_by"
  }
}}]
     
     - parameter noteId: (path)  

     - returns: RequestBuilder<NotesGetNoteResponse> 
     */
    open class func getNoteWithRequestBuilder(noteId: String) -> RequestBuilder<NotesGetNoteResponse> {
        var path = "/v1/notes/{note_id}"
        path = path.replacingOccurrences(of: "{note_id}", with: "\(noteId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NotesGetNoteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listNotes(completion: @escaping ((_ data: NotesListNotesResponse?,_ error: Error?) -> Void)) {
        listNotesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - returns: Observable<NotesListNotesResponse>
     */
    open class func listNotes() -> Observable<NotesListNotesResponse> {
        return Observable.create { observer -> Disposable in
            listNotes() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /v1/notes
     - examples: [{contentType=application/json, example={
  "notes" : [ {
    "note_id" : "note_id",
    "share_type" : { },
    "text_type" : { },
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "text" : "text",
    "created_by" : "created_by"
  }, {
    "note_id" : "note_id",
    "share_type" : { },
    "text_type" : { },
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "text" : "text",
    "created_by" : "created_by"
  } ]
}}]

     - returns: RequestBuilder<NotesListNotesResponse> 
     */
    open class func listNotesWithRequestBuilder() -> RequestBuilder<NotesListNotesResponse> {
        let path = "/v1/notes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NotesListNotesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter noteNoteId: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNote(noteNoteId: String, body: NotesUpdateNoteRequest, completion: @escaping ((_ data: NotesUpdateNoteResponse?,_ error: Error?) -> Void)) {
        updateNoteWithRequestBuilder(noteNoteId: noteNoteId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter noteNoteId: (path)  
     - parameter body: (body)  
     - returns: Observable<NotesUpdateNoteResponse>
     */
    open class func updateNote(noteNoteId: String, body: NotesUpdateNoteRequest) -> Observable<NotesUpdateNoteResponse> {
        return Observable.create { observer -> Disposable in
            updateNote(noteNoteId: noteNoteId, body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /v1/notes/{note.note_id}
     - examples: [{contentType=application/json, example={
  "note" : {
    "note_id" : "note_id",
    "share_type" : { },
    "text_type" : { },
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "text" : "text",
    "created_by" : "created_by"
  }
}}]
     
     - parameter noteNoteId: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<NotesUpdateNoteResponse> 
     */
    open class func updateNoteWithRequestBuilder(noteNoteId: String, body: NotesUpdateNoteRequest) -> RequestBuilder<NotesUpdateNoteResponse> {
        var path = "/v1/notes/{note.note_id}"
        path = path.replacingOccurrences(of: "{note.note_id}", with: "\(noteNoteId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NotesUpdateNoteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
