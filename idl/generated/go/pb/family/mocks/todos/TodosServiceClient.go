// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import todos "github.com/taeho-io/family/idl/generated/go/pb/family/todos"

// TodosServiceClient is an autogenerated mock type for the TodosServiceClient type
type TodosServiceClient struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, in, opts
func (_m *TodosServiceClient) CreateTodo(ctx context.Context, in *todos.CreateTodoRequest, opts ...grpc.CallOption) (*todos.CreateTodoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todos.CreateTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todos.CreateTodoRequest, ...grpc.CallOption) *todos.CreateTodoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.CreateTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todos.CreateTodoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: ctx, in, opts
func (_m *TodosServiceClient) DeleteTodo(ctx context.Context, in *todos.DeleteTodoRequest, opts ...grpc.CallOption) (*todos.DeleteTodoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todos.DeleteTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todos.DeleteTodoRequest, ...grpc.CallOption) *todos.DeleteTodoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.DeleteTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todos.DeleteTodoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: ctx, in, opts
func (_m *TodosServiceClient) GetTodo(ctx context.Context, in *todos.GetTodoRequest, opts ...grpc.CallOption) (*todos.GetTodoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todos.GetTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todos.GetTodoRequest, ...grpc.CallOption) *todos.GetTodoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.GetTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todos.GetTodoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTodos provides a mock function with given fields: ctx, in, opts
func (_m *TodosServiceClient) ListTodos(ctx context.Context, in *todos.ListTodosRequest, opts ...grpc.CallOption) (*todos.ListTodosResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todos.ListTodosResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todos.ListTodosRequest, ...grpc.CallOption) *todos.ListTodosResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.ListTodosResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todos.ListTodosRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: ctx, in, opts
func (_m *TodosServiceClient) UpdateTodo(ctx context.Context, in *todos.UpdateTodoRequest, opts ...grpc.CallOption) (*todos.UpdateTodoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *todos.UpdateTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *todos.UpdateTodoRequest, ...grpc.CallOption) *todos.UpdateTodoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.UpdateTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todos.UpdateTodoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
