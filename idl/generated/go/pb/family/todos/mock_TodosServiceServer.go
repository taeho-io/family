// Code generated by mockery v1.0.0. DO NOT EDIT.

package todos

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockTodosServiceServer is an autogenerated mock type for the TodosServiceServer type
type MockTodosServiceServer struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: _a0, _a1
func (_m *MockTodosServiceServer) CreateTodo(_a0 context.Context, _a1 *CreateTodoRequest) (*CreateTodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateTodoRequest) *CreateTodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateTodoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: _a0, _a1
func (_m *MockTodosServiceServer) DeleteTodo(_a0 context.Context, _a1 *DeleteTodoRequest) (*DeleteTodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTodoRequest) *DeleteTodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTodoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: _a0, _a1
func (_m *MockTodosServiceServer) GetTodo(_a0 context.Context, _a1 *GetTodoRequest) (*GetTodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTodoRequest) *GetTodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTodoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTodos provides a mock function with given fields: _a0, _a1
func (_m *MockTodosServiceServer) ListTodos(_a0 context.Context, _a1 *ListTodosRequest) (*ListTodosResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ListTodosResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ListTodosRequest) *ListTodosResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTodosResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ListTodosRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: _a0, _a1
func (_m *MockTodosServiceServer) UpdateTodo(_a0 context.Context, _a1 *UpdateTodoRequest) (*UpdateTodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *UpdateTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateTodoRequest) *UpdateTodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateTodoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
