/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NotesCreateNoteRequest', 'model/NotesCreateNoteResponse', 'model/NotesDeleteNoteResponse', 'model/NotesGetNoteResponse', 'model/NotesListNotesResponse', 'model/NotesUpdateNoteRequest', 'model/NotesUpdateNoteResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/NotesCreateNoteRequest'), require('../model/NotesCreateNoteResponse'), require('../model/NotesDeleteNoteResponse'), require('../model/NotesGetNoteResponse'), require('../model/NotesListNotesResponse'), require('../model/NotesUpdateNoteRequest'), require('../model/NotesUpdateNoteResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.NotesServiceApi = factory(root.Api.ApiClient, root.Api.NotesCreateNoteRequest, root.Api.NotesCreateNoteResponse, root.Api.NotesDeleteNoteResponse, root.Api.NotesGetNoteResponse, root.Api.NotesListNotesResponse, root.Api.NotesUpdateNoteRequest, root.Api.NotesUpdateNoteResponse);
  }
}(this, function(ApiClient, NotesCreateNoteRequest, NotesCreateNoteResponse, NotesDeleteNoteResponse, NotesGetNoteResponse, NotesListNotesResponse, NotesUpdateNoteRequest, NotesUpdateNoteResponse) {
  'use strict';

  /**
   * NotesService service.
   * @module api/NotesServiceApi
   * @version 0.0.1
   */

  /**
   * Constructs a new NotesServiceApi. 
   * @alias module:api/NotesServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {module:model/NotesCreateNoteRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotesCreateNoteResponse} and HTTP response
     */
    this.createNoteWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNote");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NotesCreateNoteResponse;

      return this.apiClient.callApi(
        '/v1/notes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {module:model/NotesCreateNoteRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotesCreateNoteResponse}
     */
    this.createNote = function(body) {
      return this.createNoteWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} noteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotesDeleteNoteResponse} and HTTP response
     */
    this.deleteNoteWithHttpInfo = function(noteId) {
      var postBody = null;

      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteNote");
      }


      var pathParams = {
        'note_id': noteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NotesDeleteNoteResponse;

      return this.apiClient.callApi(
        '/v1/notes/{note_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} noteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotesDeleteNoteResponse}
     */
    this.deleteNote = function(noteId) {
      return this.deleteNoteWithHttpInfo(noteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} noteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotesGetNoteResponse} and HTTP response
     */
    this.getNoteWithHttpInfo = function(noteId) {
      var postBody = null;

      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getNote");
      }


      var pathParams = {
        'note_id': noteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NotesGetNoteResponse;

      return this.apiClient.callApi(
        '/v1/notes/{note_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} noteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotesGetNoteResponse}
     */
    this.getNote = function(noteId) {
      return this.getNoteWithHttpInfo(noteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotesListNotesResponse} and HTTP response
     */
    this.listNotesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NotesListNotesResponse;

      return this.apiClient.callApi(
        '/v1/notes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotesListNotesResponse}
     */
    this.listNotes = function() {
      return this.listNotesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} noteNoteId 
     * @param {module:model/NotesUpdateNoteRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotesUpdateNoteResponse} and HTTP response
     */
    this.updateNoteWithHttpInfo = function(noteNoteId, body) {
      var postBody = body;

      // verify the required parameter 'noteNoteId' is set
      if (noteNoteId === undefined || noteNoteId === null) {
        throw new Error("Missing the required parameter 'noteNoteId' when calling updateNote");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNote");
      }


      var pathParams = {
        'note.note_id': noteNoteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NotesUpdateNoteResponse;

      return this.apiClient.callApi(
        '/v1/notes/{note.note_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} noteNoteId 
     * @param {module:model/NotesUpdateNoteRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotesUpdateNoteResponse}
     */
    this.updateNote = function(noteNoteId, body) {
      return this.updateNoteWithHttpInfo(noteNoteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
